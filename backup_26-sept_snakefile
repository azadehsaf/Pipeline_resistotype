import pandas as pd
from snakemake.utils import validate
from datetime import date

configfile: "snakemake_config.yaml"
today = date.today()
refName="AL123456.3"
datain=config["datas"]

rule all:
    input:
        #decompress=expand("{datain}/{sample}_{mate}.fastq", sample=config["samples"], mate=config["pair"] ,datain=config["datas"]),
        #unzipping=expand("{datain}/{sample}_{mate}.fastq", sample=config["samples"], mate=config["pair"] ,datain=config["datas"]),
        #outSpolPred_R=expand("{outfolder}/spolpred_spoligoTyping/{sample}_R2_spoligoType_R",outfolder=config["output_folder"], sample=config["samples"], datain=config["datas"]),
        #outSpolPred_D=expand("{outfolder}/spolpred_spoligoTyping/{sample}_R1_spoligoType_D",outfolder=config["output_folder"], sample=config["samples"], datain=config["datas"]),
        #outSpolPred_concatenated=expand("{outfolder}/spolpred_spoligoTyping/{sample}_spoligoType_DRall", outfolder=config["output_folder"],  sample=config["samples"],datain=config["datas"]),
        #qc=expand("{outfolder}/fastqc_qc/{sample}_{mate}_fastqc.zip", outfolder=config["output_folder"], mate=config["pair"], sample=config["samples"], datain=config["datas"]),
        mapping=expand("{outfolder}/mapped_reads/{sample}.bam", outfolder=config["output_folder"],  sample=config["samples"]),
        allmaplog=expand("{outfolder}/mapped_reads/all_sample.log", outfolder=config["output_folder"]),
        samindexing=expand("{outfolder}/sorted_reads/{sample}.sorted.bam.bai", outfolder=config["output_folder"],  sample=config["samples"]),
        samsorting= expand("{outfolder}/sorted_reads/{sample}.sorted.bam",outfolder=config["output_folder"],  sample=config["samples"]),
        allVCF=expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        cocatenate_not_rrs_rrl_selected_cols_join_POS_rrs_rrl=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_concatenate_not_rrs_rrl_pos.txt", outfolder=config["output_folder"], sample=config["samples"]),
        freebayesvcfout=expand("{outfolder}/freebayes_variant_calling/{sample}_freeBayes.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        coverageGenesout=expand("{outfolder}/coverage/{sample}_coverageResistGenes", outfolder=config["output_folder"], sample=config["samples"]),
        non_coveredGenes_out=expand("{outfolder}/coverage/{sample}_coverageResistGenes_selectedNonCovered.txt", outfolder=config["output_folder"], sample=config["samples"]),
        snpEffvcfout=expand("{outfolder}/snpEff_snp_calling/{sample}_pindel_snpEff.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        vcfoutFreeBayes=expand("{outfolder}/snpEff_snp_calling/{sample}_freeBayes_snpEff.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        outputfile_snpsift_pindel=expand("{outfolder}/snpSift_extracted_snpEff/{sample}_extracted_pindel_snpEff.txt", outfolder=config["output_folder"], sample=config["samples"]),
        vcfinpu_Chrom_Modified=expand("{outfolder}/snpSift_DB_file/{sample}_freeBayes_snpEff_chromModified.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        output_annotate_DB_2023=expand("{outfolder}/snpSift_DB_file/{sample}_snpSift_annotate_DB.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        output_join_bed_pindel=expand("{outfolder}/join_DB_file/{sample}_join_DB.bed", outfolder=config["output_folder"], sample=config["samples"]),
        output_join_bed_selected_cols_pindel=expand("{outfolder}/join_DB_file/{sample}_join_DB.bed_selected_cols", outfolder=config["output_folder"], sample=config["samples"]),
        BeforeFiltering_annotate_DB_2023=expand("{outfolder}/snpSift_DB_file/{sample}_snpSift_annotate_DB_beforeFiltering.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        intersect_intervall_freebayes=expand("{outfolder}/intersect_Intervall_snpEffFreeBayes_annotated/{sample}_intersect_intervallsnpSift_freebayes_annotate_DB_2023.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        extractedField_snpEffFreebayes_DB2023=expand("{outfolder}/intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_snpEffpindel_geneBed.txt", outfolder=config["output_folder"], sample=config["samples"]),
        output_join_bed_freebayes=expand("{outfolder}/join_DB_intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_join_DB.bed", outfolder=config["output_folder"], sample=config["samples"]),
        output_join_bed_selected_cols_sorted_freebayes=expand("{outfolder}/join_DB_intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted.txt", outfolder=config["output_folder"], sample=config["samples"]),
        join_bed_selected_cols_sorted_not_rrs_rrl=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted_not_rrs_rrl.txt", outfolder=config["output_folder"], sample=config["samples"]),
        join_bed_selected_cols_sorted_rrs_rrl=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted_rrs_rrl.txt", outfolder=config["output_folder"], sample=config["samples"]),
        join_POS_not_rrs_rrl=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_join_POS_rrs_rrl.txt", outfolder=config["output_folder"], sample=config["samples"]),
        selected_cols_join_POS_rrs_rrl=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_selected_cols_join_POS_rrs_rrl.txt", outfolder=config["output_folder"], sample=config["samples"]),
        select_line_join_POS_rrs_rrl_sorted=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_sorted_not_rrs_rrl_pos.txt", outfolder=config["output_folder"], sample=config["samples"]),
        select_line_join_POS_rrs_rrl_sorted_select_cols=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_not_rrs_rrl_pos_sorted_select_columns.txt", outfolder=config["output_folder"], sample=config["samples"]),
        big_table_join_antiBiotics=expand("{outfolder}/final_results_assembling_files/{sample}_not_rrs_rrl_join_with_AntiBiotics.txt", outfolder=config["output_folder"], sample=config["samples"]),
        all_gene_join_antiBiotics=expand("{outfolder}/final_results_assembling_files/{sample}_not_rrs_rrl_join_with_AntiBiotics.txt", outfolder=config["output_folder"], sample=config["samples"]),
        all_gene_join_antiBiotics_selected_sorted=expand("{outfolder}/final_results_assembling_files/{sample}_finale_table_AntiBiotics.txt", outfolder=config["output_folder"], sample=config["samples"]),
        all_concatenated=expand("{outfolder}/final_results_assembling_files/{sample}_VcfRrlRrsjoin_two_Vcf_rrl_rrs_spoligotyping_BedSNPSelected_coverageResistGenes_AllConcatenated.txt", outfolder=config["output_folder"], sample=config["samples"]),
        atb=expand("{outfolder}/final_results_assembling_files/{sample}ATB.txt", outfolder=config["output_folder"], sample=config["samples"]),
        big_table_join_sorted_antiBiotics=expand("{outfolder}/final_results_assembling_files/{sample}_big_table_sorted_AntiBiotics.txt", outfolder=config["output_folder"], sample=config["samples"])                                                                              

rule decom_DSRC_sample:
    input:
         "{datain}/{sample}_{mate}.fastq.dsrc"    
    output:
         "{datain}/{sample}_{mate}.fastq"   
    threads: 4
    shell:
        "dsrc d -t {threads} -s {input} > {output}"

rule unzip_sample:
    input:
        "{datain}/{sample}_{mate}.fastq.gz"
    output:
        "{datain}/{sample}_{mate}.fastq"
    shell:
        '''
        if [ ! -r {output} ]
        then
           gunzip -c {input} > {output} 
        fi
        '''


#rule zip_sample:
#    input:
#        "{datain}/{sample}_{mate}.fastq"
#    output:
#        "{datain}/{sample}_{mate}.fastq.gz"
#    shell:
#        "gzip -c {input} > {output} " 



rule quality_control_R1:
    input:
        fastq=expand("{datain}/{sample}_R1.fastq", datain=config["datas"] ,sample=config["samples"])
    output:
        qc=expand("{outfolder}/fastqc_qc/{sample}_R1_fastqc.zip", outfolder=config["output_folder"], sample=config["samples"])
    params:
        out=expand("{outfolder}/fastqc_qc", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "~/tools/FastQC/fastqc -o {params.out} {input.fastq}" 



rule quality_control_R2:
    input:
        fastq=expand("{datain}/{sample}_R2.fastq", datain=config["datas"] ,sample=config["samples"])
    output:
        qc=expand("{outfolder}/fastqc_qc/{sample}_R2_fastqc.zip", outfolder=config["output_folder"], sample=config["samples"])
    params:
        out=expand("{outfolder}/fastqc_qc", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "~/tools/FastQC/fastqc -o {params.out} {input.fastq}" 




rule bwa_map: # log ne fonctionne pas
    input:
        fa=expand("{ref}/GCF_000195955.2_ASM19595v2_genomic.fa", ref=config["reference"]),
        fastq=expand("{datain}/{sample}_{mate}.fastq", sample=config["samples"], mate=config["pair"], datain=config["datas"] )
        
    log: 
        log_mapping=expand("{outfolder}/mapped_reads/{sample}.log", outfolder=config["output_folder"],  sample=config["samples"])   
    output:
        mapping=expand("{outfolder}/mapped_reads/{sample}.bam", outfolder=config["output_folder"],  sample=config["samples"])
    threads: 8
    shell:
        "bwa mem -t {threads} {input.fa} {input.fastq} -v1  | samtools view -Sb  > {output.mapping}"





rule concatenate_logs:
    input: 
        expand("{outfolder}/mapped_reads/{sample}.log", outfolder=config["output_folder"], sample=config["samples"])
    output:
        expand("{outfolder}/mapped_reads/all_sample.log", outfolder=config["output_folder"])
    shell:
        "cat {input} >> {output}"


rule samtools_sort:
    input:
       expand("{outfolder}/mapped_reads/{sample}.bam", outfolder=config["output_folder"],  sample=config["samples"])    
    output:
        #selec
        expand("{outfolder}/sorted_reads/{sample}.sorted.bam", outfolder=config["output_folder"],  sample=config["samples"]) 
    shell:
        "samtools sort -T {input}"
        "samtools -O bam {input} > {output}"
        


rule samtools_index:
    input:
        expand("{outfolder}/sorted_reads/{sample}.sorted.bam", outfolder=config["output_folder"],  sample=config["samples"]) 
    output:
        expand("{outfolder}/sorted_reads/{sample}.sorted.bam.bai", outfolder=config["output_folder"],  sample=config["samples"]) 
    shell:
        "samtools index {input}"



rule make_pindel_config_file:
    input:
        bam=expand("{outfolder}/sorted_reads/{sample}.sorted.bam", outfolder=config["output_folder"],  sample=config["samples"]), 
        
    output:
        configbam=expand("{ref}/pindel_config.txt", ref=config["reference"])
    params:
        ligne=expand("400 {sample}",  sample=config["samples"]) 
    shell:
        '''
        if [ -f {output} ] 
           then 
              rm {output} 
           fi;
              
        echo "{input.bam} {params.ligne}" >> {output.configbam}
        '''

rule call_vaiants_pindel: 
    input:
        fa=expand("{ref}/GCF_000195955.2_ASM19595v2_genomic.fa", ref=config["reference"]), # -c ALL
        bam=expand("{ref}/pindel_config.txt", ref=config["reference"]),
        bed=expand("{ref}/interval2023_chrom_replaced_pindel.bed", ref=config["reference"]),
    output:
        #expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output_D", outfolder=config["output_folder"], sample=config["samples"]),
        vcfout=expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output.vcf", outfolder=config["output_folder"], sample=config["samples"])
    log:
        expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output.log", outfolder=config["output_folder"], sample=config["samples"])
    threads: 8
    params:
        outprefix= expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        '''
        pindel -f {input.fa}  -i {input.bam}  -j {input.bed} -T {threads} -o {params.outprefix} -x6 -e 0.005 -E 0.95 -u 0.05 -M 10  -R true -C true > {log}
        pindel2vcf -P {params.outprefix} -r {input.fa} -R \"NC_000962.3\" --gatk_compatible -d {today} --max_size 100000 -m 1 -v {output.vcfout}
        '''



rule FreeBayes:
    input:
        bam=expand("{outfolder}/sorted_reads/{sample}.sorted.bam",  outfolder=config["output_folder"] ,sample=config["samples"]),
        fa=expand("{ref}/GCF_000195955.2_ASM19595v2_genomic.fa", ref=config["reference"]),
        bed=expand("{ref}/interval2023_chrom_replaced.bed", ref=config["reference"])   
    output:
        vcfout=expand("{outfolder}/freebayes_variant_calling/{sample}_freeBayes.vcf", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "freebayes -f {input.fa} -t {input.bed} -m 30 -q 20 -S 0 -b {input.bam}  > {output}"

rule Coverage:
    input:
        bam=expand("{outfolder}/sorted_reads/{sample}.sorted.bam",  outfolder=config["output_folder"] ,sample=config["samples"]),
        bed=expand("{ref}/interval2023_chrom_replaced.bed", ref=config["reference"]), 
        fa=expand("{ref}/AL123456.3.fa.fai", ref=config["reference"])  
    output:
        coverageGenesout=expand("{outfolder}/coverage/{sample}_coverageResistGenes", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "bedtools coverage -split -a {input.bed} -b {input.bam}  > {output}"  #  -g {input.fa}



rule Select_Coverage:
    input:
        coverageGenesinput=expand("{outfolder}/coverage/{sample}_coverageResistGenes", outfolder=config["output_folder"], sample=config["samples"])
    output:
        non_coveredGenes_out=expand("{outfolder}/coverage/{sample}_coverageResistGenes_selectedNonCovered.txt", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "grep -v '(1.0000000)'  {input.coverageGenesinput} > {output}" 





#rule call_variants:
#    input:
#        fa=expand("{ref}/GCF_000195955.2_ASM19595v2_genomic.fa", ref=config["reference"]),
#        bam=expand("{outfolder}/sorted_reads/{sample}.sorted.bam", outfolder=config["output_folder"], sample=config["samples"])
#    output:
#        expand("{outfolder}/variant_calling/all.vcf", outfolder=config["output_folder"])
#    #conda:
#    #    "envs/calling.yaml"
#    shell:
#        "bcftools mpileup  -d 8000 -f {input.fa} {input.bam} | bcftools call -mv - > {output}"



rule call_variants:
    input:
        fa=expand("{ref}/GCF_000195955.2_ASM19595v2_genomic.fa", ref=config["reference"]),
        bam=expand("{outfolder}/sorted_reads/{sample}.sorted.bam", outfolder=config["output_folder"], sample=config["samples"])
    output:
        expand("{outfolder}/variant_calling/all.vcf", outfolder=config["output_folder"])
    #conda:
    #    "envs/calling.yaml"
    shell:
        "bcftools mpileup  -d 8000 -f {input.fa} {input.bam} | bcftools call -mv - > {output}"





rule SnpEff_pindel_outVCF:
    input:
        fa=expand("{ref}/GCF_000195955.2_ASM19595v2_genomic.fa", ref=config["reference"]),
        vcf=expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output.vcf", outfolder=config["output_folder"], sample=config["samples"])
    output:
        vcfmodified=expand("{outfolder}/snpEff_snp_calling/{sample}_pindel_snpEff_chrom_modified_input.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        snpEffvcfout=expand("{outfolder}/snpEff_snp_calling/{sample}_pindel_snpEff.vcf", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        '''
        sed 's/NC_000962.3/Chromosome/g' {input.vcf} > {output.vcfmodified}
        java  -Xms7000m -Xmx16000m -XX:ParallelGCThreads=2 -XX:+AggressiveHeap  -jar snpEff/snpEff.jar -noStats -ud 200 -ss 2 -no-utr -i vcf -o vcf -v Mycobacterium_tuberculosis_h37rv {output.vcfmodified} > {output.snpEffvcfout}
        '''

rule snpSift_extract_fields_snpEff_pindel:
    input:
       snpEffvcfout=expand("{outfolder}/snpEff_snp_calling/{sample}_pindel_snpEff.vcf", outfolder=config["output_folder"], sample=config["samples"])
    output:
        outputfile=expand("{outfolder}/snpSift_extracted_snpEff/{sample}_extracted_pindel_snpEff.txt", outfolder=config["output_folder"], sample=config["samples"])
    
    shell:
        "cat {input.snpEffvcfout} | ./scripts/vcfEffOnePerLine.pl | java -Xmx12g -jar snpEff/SnpSift.jar extractFields - POS REF ALT SVTYPE SVLEN ANN[*].GENE ANN[*].EFFECT > {output}"


rule join_two_DB_extract_fields_snpEff_pindel:
    input:
        pindel_annot_db=expand("{outfolder}/snpSift_extracted_snpEff/{sample}_extracted_pindel_snpEff.txt", outfolder=config["output_folder"], sample=config["samples"]), #col 6
        bed=expand("{ref}/interval2023_with_Header_forJoin.bed", ref=config["reference"]) #col 4
    output:
        output_join_bed=expand("{outfolder}/join_DB_file/{sample}_join_DB.bed", outfolder=config["output_folder"], sample=config["samples"]),
        output_join_bed_selected_cols=expand("{outfolder}/join_DB_file/{sample}_join_DB.bed_selected_cols", outfolder=config["output_folder"], sample=config["samples"])
    shell: 
        '''python scripts/join_bed_vcf.py {input.pindel_annot_db} {input.bed} {output.output_join_bed}
           cut -f1-7 {output.output_join_bed} > {output.output_join_bed_selected_cols} 
        '''    


rule SnpEff_freeBayes_outVCF:
    input:
        fa=expand("{ref}/GCF_000195955.2_ASM19595v2_genomic.fa", ref=config["reference"]),
        vcf=expand("{outfolder}/freebayes_variant_calling/{sample}_freeBayes.vcf", outfolder=config["output_folder"], sample=config["samples"])
    output:
        vcfmodified=expand("{outfolder}/snpEff_snp_calling/{sample}_freeBayes_snpEff_chrom_modified_input.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        vcfout=expand("{outfolder}/snpEff_snp_calling/{sample}_freeBayes_snpEff.vcf", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        '''     
        sed 's/NC_000962.3/Chromosome/g' {input.vcf} > {output.vcfmodified}
        java  -Xms7000m -Xmx16000m -XX:ParallelGCThreads=2 -XX:+AggressiveHeap  -jar snpEff/snpEff.jar -noStats -ud 200 -ss 2 -hgvsOld -hgvs1LetterAa -o vcf -v Mycobacterium_tuberculosis_h37rv {output.vcfmodified} > {output.vcfout}
        '''



rule snpSift_annotate_snpEff_freebayes:
    input:
        vcfinput=expand("{outfolder}/snpEff_snp_calling/{sample}_freeBayes_snpEff.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        vcf_DB_custom=expand("{ref}/20230720_BASE_FINALE_PMW-HDv2.vcf", ref=config["reference"])
    output:
        vcfinput_Chrom_Modified=expand("{outfolder}/snpSift_DB_file/{sample}_freeBayes_snpEff_chromModified.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        output_annotate_DB_2023_bfFiltering=expand("{outfolder}/snpSift_DB_file/{sample}_snpSift_annotate_DB_beforeFiltering.vcf", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        '''
        sed 's/Chromosome/AL123456.3/g' {input.vcfinput} > {output.vcfinput_Chrom_Modified}
        java -Xmx12g -jar snpEff/SnpSift.jar annotate  {input.vcf_DB_custom} {output.vcfinput_Chrom_Modified} > {output.output_annotate_DB_2023_bfFiltering}
        '''


rule snpSift_annotate_snpEff_freebayes_FilteringQuality:
    input:
        annotate_DB_2023=expand("{outfolder}/snpSift_DB_file/{sample}_snpSift_annotate_DB_beforeFiltering.vcf", outfolder=config["output_folder"], sample=config["samples"])
    output:
        output_annotate_DB_2023_filtered_qualGT500=expand("{outfolder}/snpSift_DB_file/{sample}_snpSift_annotate_DB.vcf", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "cat  {input.annotate_DB_2023} | java -Xmx12g -jar snpEff/SnpSift.jar filter \" ( QUAL > 500 )\" > {output.output_annotate_DB_2023_filtered_qualGT500}"





rule bedtools_intersect_filtered_and_annotated_SnpEff_freebayes: 
    input:
        filtered_annotate_DB_2023=expand("{outfolder}/snpSift_DB_file/{sample}_snpSift_annotate_DB.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        bed=expand("{ref}/interval2023_replaced.bed", ref=config["reference"])
    output:   
        intersect_intervall=expand("{outfolder}/intersect_Intervall_snpEffFreeBayes_annotated/{sample}_intersect_intervallsnpSift_freebayes_annotate_DB_2023.vcf", outfolder=config["output_folder"], sample=config["samples"])
    shell:  
        "bedtools intersect -a {input.filtered_annotate_DB_2023} -b {input.bed} -wa -header > {output.intersect_intervall}" 



rule snpSift_extract_fields_intersect_interval_SnpEff_freebayes:
    input:
       input_intersect_interval=expand("{outfolder}/intersect_Intervall_snpEffFreeBayes_annotated/{sample}_intersect_intervallsnpSift_freebayes_annotate_DB_2023.vcf", outfolder=config["output_folder"], sample=config["samples"])
    output:
        extractedField_snpEffFreebayes_DB2023=expand("{outfolder}/intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_snpEffpindel_geneBed.txt", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "cat {input.input_intersect_interval} | ./scripts/vcfEffOnePerLine.pl | java -Xmx12g -jar snpEff/SnpSift.jar extractFields - POS REF ALT GEN[*].DP GEN[*].RO GEN[*].AO \"ANN[*].GENEID\" \"ANN[*].GENE\" \"ANN[*].HGVS_P\" \"ANN[*].HGVS_C\" QUAL EVENT ABREV \"M_NB_S\" \"M_PROP_S\" \"M_PROP_RES_S\" \"P_INTER\" \"W_INTER\" \"PHENO_NRC\" > {output.extractedField_snpEffFreebayes_DB2023}"



rule join_two_DB_extractedField_IntersectIntervall_BedVcf:
    input:
        extractedField_snpEffFreebayes_DB2023=expand("{outfolder}/intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_snpEffpindel_geneBed.txt", outfolder=config["output_folder"], sample=config["samples"]),
        bed=expand("{ref}/interval2023_with_Header_forJoin.bed", ref=config["reference"]) #col 4
    output:
        output_join_bed=expand("{outfolder}/join_DB_intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_join_DB.bed", outfolder=config["output_folder"], sample=config["samples"]),
        output_join_bed_selected_cols_sorted=expand("{outfolder}/join_DB_intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted.txt", outfolder=config["output_folder"], sample=config["samples"]),
    shell: 
        ''' python scripts/join_bed_vcf.py {input.extractedField_snpEffFreebayes_DB2023} {input.bed} {output.output_join_bed}
            cut -f1-19 {output.output_join_bed} | sort -n -k1,1 > {output.output_join_bed_selected_cols_sorted}
        '''



rule select_join_two_Vcf_rrl_rrs:
    input:
        join_bed_selected_cols_sorted=expand("{outfolder}/join_DB_intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted.txt", outfolder=config["output_folder"], sample=config["samples"])
    output:
        output_join_bed_selected_cols_sorted_rrs_rrl=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted_rrs_rrl.txt", outfolder=config["output_folder"], sample=config["samples"]),
        output_join_bed_selected_cols_sorted_not_rrs_rrl=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted_not_rrs_rrl.txt", outfolder=config["output_folder"], sample=config["samples"])
    shell: 
        ''' grep "rrs\|rrl\|POS" {input.join_bed_selected_cols_sorted} > {output.output_join_bed_selected_cols_sorted_rrs_rrl}
            grep -v "rrs\|rrl" {input.join_bed_selected_cols_sorted} > {output.output_join_bed_selected_cols_sorted_not_rrs_rrl}
        '''


rule join_rrs_rrl_pos:
    input:
        input_join_bed_selected_cols_sorted_rrs_rrl=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted_rrs_rrl.txt", outfolder=config["output_folder"], sample=config["samples"]),
        rrl_rrs_data=expand("{ref}/rrs-rrl_position.txt", ref=config["reference"])#col 1 
    output:
        join_POS_rrs_rrl=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_join_POS_rrs_rrl.txt", outfolder=config["output_folder"], sample=config["samples"]),
    shell: 
        "python scripts/join_bed_vcf.py {input.input_join_bed_selected_cols_sorted_rrs_rrl} {input.rrl_rrs_data} {output.join_POS_rrs_rrl}"
           

rule choose_cols_join_rrs_rrl_pos:
    input:
        join_POS_rrs_rrl=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_join_POS_rrs_rrl.txt", outfolder=config["output_folder"], sample=config["samples"])
    output:
        selected_cols_join_POS_rrs_rrl=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_selected_cols_join_POS_rrs_rrl.txt", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        """cat {input.join_POS_rrs_rrl} |  awk -F'\t' '{{print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"$8"\t"$21"\t"$10"\t"$11"\t"$12"\t"$13"\t"$14"\t"$15"\t"$16"\t"$17"\t"$18"\t"$19}}' | sed 1d > {output.selected_cols_join_POS_rrs_rrl}"""



rule call_spolpred_D:
    input:
        fastq=expand("{datain}/{sample}_R1.fastq", sample=config["samples"] ,datain=config["datas"])
    output:
        outSpolPred_D=expand("{outfolder}/spolpred_spoligoTyping/{sample}_R1_spoligoType_D", outfolder=config["output_folder"] ,sample=config["samples"],datain=config["datas"])
    shell:
        "./spolpred/SpolPred {input} -l 50 -b d -o {output} -s on -a 50 -m 2"


rule call_spolpred_R:
    input:
        fastq=expand("{datain}/{sample}_R2.fastq", sample=config["samples"], datain=config["datas"])
    output:
        outSpolPred_R=expand("{outfolder}/spolpred_spoligoTyping/{sample}_R2_spoligoType_R", outfolder=config["output_folder"],  sample=config["samples"],datain=config["datas"])
    shell:
        "./spolpred/SpolPred {input} -l 50 -b r -o {output} -s on -a 50 -m 2"



rule concatenate_spoligoType_D_R:
    input:
        outSpolPred_D=expand("{outfolder}/spolpred_spoligoTyping/{sample}_R1_spoligoType_D", outfolder=config["output_folder"], sample=config["samples"]),
        outSpolPred_R=expand("{outfolder}/spolpred_spoligoTyping/{sample}_R2_spoligoType_R", outfolder=config["output_folder"], sample=config["samples"])
    output:
        outSpolPred_concatenated=expand("{outfolder}/spolpred_spoligoTyping/{sample}_spoligoType_DRall",outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "cat {input.outSpolPred_D} {input.outSpolPred_R} > {output}"


rule cocatenate_and_select_data_set:
    input:
        output_join_bed_selected_cols_sorted_not_rrs_rrl=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted_not_rrs_rrl.txt", outfolder=config["output_folder"], sample=config["samples"]),
        selected_cols_join_POS_rrs_rrl=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_selected_cols_join_POS_rrs_rrl.txt", outfolder=config["output_folder"], sample=config["samples"])
    output:
        cocatenate_not_rrs_rrl_selected_cols_join_POS_rrs_rrl=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_concatenate_not_rrs_rrl_pos.txt", outfolder=config["output_folder"], sample=config["samples"]),
        select_line_join_POS_rrs_rrl_sorted=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_sorted_not_rrs_rrl_pos.txt", outfolder=config["output_folder"], sample=config["samples"]),
        select_line_join_POS_rrs_rrl_sorted_select_cols=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_not_rrs_rrl_pos_sorted_select_columns.txt", outfolder=config["output_folder"], sample=config["samples"])

    shell:
        '''
        cat {input.output_join_bed_selected_cols_sorted_not_rrs_rrl} {input.selected_cols_join_POS_rrs_rrl}  > {output.cocatenate_not_rrs_rrl_selected_cols_join_POS_rrs_rrl}
        grep -v -P '[-|\*]\d{{3,5}}' {output.cocatenate_not_rrs_rrl_selected_cols_join_POS_rrs_rrl} | sort -n -k1,1 > {output.select_line_join_POS_rrs_rrl_sorted}
        cat {output.select_line_join_POS_rrs_rrl_sorted} | cut -f 1-6,8-11 > {output.select_line_join_POS_rrs_rrl_sorted_select_cols}
        '''

rule concatenate_datasets: 
    input:
        select_line_join_POS_rrs_rrl_sorted=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_sorted_not_rrs_rrl_pos.txt", outfolder=config["output_folder"], sample=config["samples"]),
        outSpolPred_concatenated=expand("{outfolder}/spolpred_spoligoTyping/{sample}_spoligoType_DRall",outfolder=config["output_folder"], sample=config["samples"]),
        output_join_bed_selected_cols=expand("{outfolder}/join_DB_file/{sample}_join_DB.bed_selected_cols", outfolder=config["output_folder"], sample=config["samples"]),
        non_coveredGenes_out=expand("{outfolder}/coverage/{sample}_coverageResistGenes_selectedNonCovered.txt", outfolder=config["output_folder"], sample=config["samples"])
    output:
         out_all_concatenated=expand("{outfolder}/final_results_assembling_files/{sample}_VcfRrlRrsjoin_two_Vcf_rrl_rrs_spoligotyping_BedSNPSelected_coverageResistGenes_AllConcatenated.txt", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "cat {input.select_line_join_POS_rrs_rrl_sorted} {input.outSpolPred_concatenated} {input.output_join_bed_selected_cols} {input.non_coveredGenes_out} > {output.out_all_concatenated}"



rule join_two_datasets:
    input:
        select_line_join_POS_rrs_rrl_sorted_select_cols=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_not_rrs_rrl_pos_sorted_select_columns.txt", outfolder=config["output_folder"], sample=config["samples"]), 
        all_cols_join_POS_rrs_rrl_sorted=expand("{outfolder}/join_two_Vcf_rrl_rrs/{sample}_sorted_not_rrs_rrl_pos.txt", outfolder=config["output_folder"], sample=config["samples"]),
        antibiotics_data=expand("{ref}/ATB-Genes.txt", ref=config["reference"])
    output:
        all_gene_join_antiBiotics=expand("{outfolder}/final_results_assembling_files/{sample}_not_rrs_rrl_join_with_AntiBiotics.txt", outfolder=config["output_folder"], sample=config["samples"]),
        big_table_join_antiBiotics=expand("{outfolder}/final_results_assembling_files/{sample}_big_table_not_rrs_rrl_join_with_AntiBiotics.txt", outfolder=config["output_folder"], sample=config["samples"])   
    shell:
        '''
        python scripts/join_bed_keeping_All_linesVCF.py {input.select_line_join_POS_rrs_rrl_sorted_select_cols} {input.antibiotics_data} {output.all_gene_join_antiBiotics}
        python scripts/join_bed_keeping_All_linesVCF.py {input.all_cols_join_POS_rrs_rrl_sorted} {input.antibiotics_data} {output.big_table_join_antiBiotics}
        '''




rule last_formating:
    input:
        all_gene_join_antiBiotics=expand("{outfolder}/final_results_assembling_files/{sample}_not_rrs_rrl_join_with_AntiBiotics.txt", outfolder=config["output_folder"], sample=config["samples"]),
        big_table_join_antiBiotics=expand("{outfolder}/final_results_assembling_files/{sample}_big_table_not_rrs_rrl_join_with_AntiBiotics.txt", outfolder=config["output_folder"], sample=config["samples"])
    output:
        all_gene_join_antiBiotics_selected_sorted=expand("{outfolder}/final_results_assembling_files/{sample}_finale_table_AntiBiotics.txt", outfolder=config["output_folder"], sample=config["samples"]),
        atb=expand("{outfolder}/final_results_assembling_files/{sample}ATB.txt", outfolder=config["output_folder"], sample=config["samples"]),
        big_table_join_sorted_antiBiotics=expand("{outfolder}/final_results_assembling_files/{sample}_big_table_sorted_AntiBiotics.txt", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        '''
        cat {input.big_table_join_antiBiotics}|awk -F'\t' '{{print $20"\t"$1"\t"$2"\t"$3"\t"$4"\t"$6"\t"$6*100/$4"\t"$8"\t"$9"\t"$10"\t"$11"\t"$14"\t"$15"\t"$16"\t"$17"\t"$18"\t"$19}}' | sed 1d | sort -k1,1 |sed '1iAntibio\tPOS\tREF\tALT\tGEN[*].DP\tGEN[*].AO\t%mutated\tANN[*].GENE\tANN[*].HGVS_P\tANN[*].HGVS_C\tQUAL\tM_NB_S\tM_PROP_S\tM_PROP_RES_S\tP_INTER\tW_INTER\tPHENO_NRC'>{output.big_table_join_sorted_antiBiotics}
        cat {input.all_gene_join_antiBiotics} |awk -F'\t' '{{print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"$11}}'| sed 1d | sort -k1,1 | sed '1iPOS\tREF\tALT\tGEN[*].DP\tGEN[*].RO\tGEN[*].AO\tANN[*].GENE\tAntibio'> {output.all_gene_join_antiBiotics_selected_sorted}
        cat {input.all_gene_join_antiBiotics} |awk -F'\t' '{{print $11"\t"$1"\t"$4"\t"$6"\t"$7"\t"$8"\t"$9}}' | sed 1d | sort -k1,1 | sed '1iAntibio\tPOS\tGEN[*].DP\tGEN[*].AO\tANN[*].GENE\tANN[*].HGVS_P\tANN[*].HGVS_C' > {output.atb}
        '''    


 