import pandas as pd
from snakemake.utils import validate
from datetime import date

configfile: "snakemake_config.yaml"
today = date.today()
refName="AL123456.3"
datain=config["datas"]

rule all:
    input:
        decompress=expand("{datain}/{sample}_{mate}.fastq", sample=config["samples"], mate=config["pair"] ,datain=config["datas"]),
        zipping=expand("{datain}/{sample}_{mate}.fastq.gz", sample=config["samples"], mate=config["pair"] ,datain=config["datas"]),
        outSpolPred_R=expand("{outfolder}/spolpred_spoligoTyping/{sample}_R2_spoligoType_R",outfolder=config["output_folder"], sample=config["samples"], datain=config["datas"]),
        outSpolPred_D=expand("{outfolder}/spolpred_spoligoTyping/{sample}_R1_spoligoType_D",outfolder=config["output_folder"], sample=config["samples"], datain=config["datas"]),
        outSpolPred_concatenated=expand("{outfolder}/spolpred_spoligoTyping/{sample}_spoligoType_DRall", outfolder=config["output_folder"],  sample=config["samples"],datain=config["datas"]),
        configbam=expand("{ref}/pindel_config_test.txt", ref=config["reference"]),
        qc=expand("{outfolder}/fastqc_qc/{sample}_{mate}_fastqc.zip", outfolder=config["output_folder"], mate=config["pair"], sample=config["samples"], datain=config["datas"]),
        mapping=expand("{outfolder}/mapped_reads/{sample}.bam", outfolder=config["output_folder"],  sample=config["samples"]),
        allmaplog=expand("{outfolder}/mapped_reads/all_sample.log", outfolder=config["output_folder"]),
        samindexing=expand("{outfolder}/sorted_reads/{sample}.sorted.bam.bai", outfolder=config["output_folder"],  sample=config["samples"]),
        samsorting= expand("{outfolder}/sorted_reads/{sample}.sorted.bam",outfolder=config["output_folder"],  sample=config["samples"]),
        pindelvariantcalling=expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output_D", outfolder=config["output_folder"],  sample=config["samples"]),
        allVCF=expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        freebayesvcfout=expand("{outfolder}/freebayes_variant_calling/{sample}_freeBayes.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        coverageGenesout=expand("{outfolder}/coverage/{sample}_coverageResistGenes", outfolder=config["output_folder"], sample=config["samples"]),
        snpEffvcfout=expand("{outfolder}/snpEff_snp_calling/{sample}_pindel_snpEff.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        vcfoutFreeBayes=expand("{outfolder}/snpEff_snp_calling/{sample}_freeBayes_snpEff.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        #selection_coverage_genes=expand("{outfolder}/selection_of_resistogene/{sample}_Selected_coverage", outfolder=config["output_folder"], sample=config["samples"]),
        outputfile_snpsift_pindel=expand("{outfolder}/snpSift_extracted_snpEff/{sample}_extracted_pindel_snpEff.txt", outfolder=config["output_folder"], sample=config["samples"]),
        output_annotate_DB_2023=expand("{outfolder}/snpSift_DB_file/{sample}_snpSift_annotate_DB.txt", outfolder=config["output_folder"], sample=config["samples"]),
        output_join_bed=expand("{outfolder}/join_DB_file/{sample}_join_DB.bed", outfolder=config["output_folder"], sample=config["samples"])

        


rule decom_DSRC_sample:
    input:
         "{datain}/{sample}_{mate}.fastq.dsrc"    
    output:
         "{datain}/{sample}_{mate}.fastq"   
    threads: 4
    shell:
        "dsrc d -t{threads} -s {input} > {output}"



rule zip_sample:
    input:
        "{datain}/{sample}_{mate}.fastq"
    output:
        "{datain}/{sample}_{mate}.fastq.gz"
    shell:
        "gzip -c {input} > {output} " 



rule quality_control_R1:
    input:
        fastq=expand("{datain}/{sample}_R1.fastq", datain=config["datas"] ,sample=config["samples"])
    output:
        qc=expand("{outfolder}/fastqc_qc/{sample}_R1_fastqc.zip", outfolder=config["output_folder"], sample=config["samples"])
    params:
        out=expand("{outfolder}/fastqc_qc", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "~/tools/FastQC/fastqc -o {params.out} {input.fastq}" 



rule quality_control_R2:
    input:
        fastq=expand("{datain}/{sample}_R2.fastq", datain=config["datas"] ,sample=config["samples"])
    output:
        qc=expand("{outfolder}/fastqc_qc/{sample}_R2_fastqc.zip", outfolder=config["output_folder"], sample=config["samples"])
    params:
        out=expand("{outfolder}/fastqc_qc", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "~/tools/FastQC/fastqc -o {params.out} {input.fastq}" 




rule bwa_map: # log ne fonctionne pas
    input:
        fa=expand("{ref}/GCF_000195955.2_ASM19595v2_genomic.fa", ref=config["reference"]),
        fastq=expand("{datain}/{sample}_{mate}.fastq", sample=config["samples"], mate=config["pair"], datain=config["datas"] )
        #"{datain}/{sample}.fastq"
    log: 
        log_mapping=expand("{outfolder}/mapped_reads/{sample}.log", outfolder=config["output_folder"],  sample=config["samples"])   
    output:
        mapping=expand("{outfolder}/mapped_reads/{sample}.bam", outfolder=config["output_folder"],  sample=config["samples"])
    threads: 8
    shell:
        "bwa mem  -P -t {threads} {input.fa} {input.fastq} -v1  | samtools view -Sb - > {output.mapping}"


rule concatenate_logs:
    input: 
        expand("{outfolder}/mapped_reads/{sample}.log", outfolder=config["output_folder"], sample=config["samples"])
    output:
        expand("{outfolder}/mapped_reads/all_sample.log", outfolder=config["output_folder"])
    shell:
        "cat {input} >> {output}"


rule samtools_sort:
    input:
       expand("{outfolder}/mapped_reads/{sample}.bam", outfolder=config["output_folder"],  sample=config["samples"])    
    output:
        #selec
        expand("{outfolder}/sorted_reads/{sample}.sorted.bam", outfolder=config["output_folder"],  sample=config["samples"]) 
    shell:
        "samtools sort -T {input}"
        "samtools -O bam {input} > {output}"
        


rule samtools_index:
    input:
        expand("{outfolder}/sorted_reads/{sample}.sorted.bam", outfolder=config["output_folder"],  sample=config["samples"]) 
    output:
        expand("{outfolder}/sorted_reads/{sample}.sorted.bam.bai", outfolder=config["output_folder"],  sample=config["samples"]) 
    shell:
        "samtools index {input}"



rule make_pindel_config_file:
    input:
        bam=expand("{outfolder}/sorted_reads/{sample}.sorted.bam", outfolder=config["output_folder"],  sample=config["samples"]), 
        
    output:
        configbam=expand("{ref}/pindel_config_test.txt", ref=config["reference"])
    params:
        ligne=expand("400 {sample}",  sample=config["samples"]) 
    shell:
        '''
        if [ -f {output} ] 
           then 
              rm {output} 
           fi;
              
        echo "{input.bam} {params.ligne}" >> {output.configbam}
        '''

rule call_variants:
    input:
        fa=expand("{ref}/GCF_000195955.2_ASM19595v2_genomic.fa", ref=config["reference"]),
        bam=expand("{outfolder}/sorted_reads/{sample}.sorted.bam", outfolder=config["output_folder"], sample=config["samples"])
    output:
        expand("{outfolder}/variant_calling/all.vcf", outfolder=config["output_folder"])
    #conda:
    #    "envs/calling.yaml"
    shell:
        "bcftools mpileup  -d 8000 -f {input.fa} {input.bam} | bcftools call -mv - > {output}"


rule call_vaiants_pindel:
    input:
        fa=expand("{ref}/GCF_000195955.2_ASM19595v2_genomic.fa", ref=config["reference"]),
        bam=expand("{ref}/pindel_config_test.txt", ref=config["reference"]),
        bed=expand("{ref}/interval2023.bed", ref=config["reference"]),
        index=expand("{outfolder}/sorted_reads/{sample}.sorted.bam.bai",  outfolder=config["output_folder"] ,sample=config["samples"])
    output:
        expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output_D", outfolder=config["output_folder"], sample=config["samples"])
    log:
        expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output.log", outfolder=config["output_folder"], sample=config["samples"])
    threads: 8
    params:
        outprefix= expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "pindel -T {threads} -f {input.fa} -i {input.bam} -o {params.outprefix} -x6 -n 400 -d 0.95  -u 0.05 -e 0.005 -c ALL -s True {input.bed}  {log}"


rule call_pindel_VCF:
    input:
        fa=expand("{ref}/GCF_000195955.2_ASM19595v2_genomic.fa", ref=config["reference"]),
        resin=expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output_D", outfolder=config["output_folder"], sample=config["samples"])
    output:
        vcfout=expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output.vcf", outfolder=config["output_folder"], sample=config["samples"])
    params:
        all_prefix=expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "pindel2vcf -P {params.all_prefix} -r {input.fa} -R {refName} -d {today} --max_size 100000 -v {output.vcfout}"



rule call_spolpred_D:
    input:
        fastq=expand("{datain}/{sample}_R1.fastq", sample=config["samples"] ,datain=config["datas"])
    output:
        outSpolPred_D=expand("{outfolder}/spolpred_spoligoTyping/{sample}_R1_spoligoType_D", outfolder=config["output_folder"] ,sample=config["samples"],datain=config["datas"])
    shell:
        "./spolpred/SpolPred {input} -l 50 -b d -o {output} -s on -a 50 -m 2"


rule call_spolpred_R:
    input:
        fastq=expand("{datain}/{sample}_R2.fastq", sample=config["samples"], datain=config["datas"])
    output:
        outSpolPred_R=expand("{outfolder}/spolpred_spoligoTyping/{sample}_R2_spoligoType_R", outfolder=config["output_folder"],  sample=config["samples"],datain=config["datas"])
    shell:
        "./spolpred/SpolPred {input} -l 50 -b r -o {output} -s on -a 50 -m 2"



rule concatenate_spoligoType_D_R:
    input:
        outSpolPred_D=expand("{outfolder}/spolpred_spoligoTyping/{sample}_R1_spoligoType_D", outfolder=config["output_folder"], sample=config["samples"]),
        outSpolPred_R=expand("{outfolder}/spolpred_spoligoTyping/{sample}_R2_spoligoType_R", outfolder=config["output_folder"], sample=config["samples"])
    output:
        outSpolPred_concatenated=expand("{outfolder}/spolpred_spoligoTyping/{sample}_spoligoType_DRall",outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "cat {input.outSpolPred_D} {input.outSpolPred_R} > {output}"


rule FreeBayes:
    input:
        bam=expand("{outfolder}/sorted_reads/{sample}.sorted.bam",  outfolder=config["output_folder"] ,sample=config["samples"]),
        fa=expand("{ref}/GCF_000195955.2_ASM19595v2_genomic.fa", ref=config["reference"]),
        bed=expand("{ref}/interval2023_chrom_replaced.bed", ref=config["reference"])   
    output:
        vcfout=expand("{outfolder}/freebayes_variant_calling/{sample}_freeBayes.vcf", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "freebayes -f {input.fa} -t {input.bed} -m 30 -q 20 -S 0 -b {input.bam}  > {output}"

rule Coverage:
    input:
        bam=expand("{outfolder}/sorted_reads/{sample}.sorted.bam",  outfolder=config["output_folder"] ,sample=config["samples"]),
        bed=expand("{ref}/interval2023_chrom_replaced.bed", ref=config["reference"]), 
        fa=expand("{ref}/AL123456.3.fa.fai", ref=config["reference"])  
    output:
        coverageGenesout=expand("{outfolder}/coverage/{sample}_coverageResistGenes", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "bedtools coverage -split -a {input.bed} -b {input.bam}  > {output}"  #  -g {input.fa}



rule SnpEff_pindel_outVCF:
    input:
        fa=expand("{ref}/GCF_000195955.2_ASM19595v2_genomic.fa", ref=config["reference"]),
        vcf=expand("{outfolder}/pindel_variant_calling/{sample}_all_pindel_output.vcf", outfolder=config["output_folder"], sample=config["samples"])
    output:
        vcfmodified=expand("{outfolder}/snpEff_snp_calling/{sample}_pindel_snpEff_chrom_modified.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        vcfout=expand("{outfolder}/snpEff_snp_calling/{sample}_pindel_snpEff.vcf", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        '''
        sed 's/NC_000962.3/Chromosome/g' {input.vcf} > {output.vcfmodified}
        java  -Xms7000m -Xmx16000m -XX:ParallelGCThreads=2 -XX:+AggressiveHeap  -jar snpEff/snpEff.jar -noStats -ud 5000 -ss 2 -no-utr -i vcf -o vcf -v Mycobacterium_tuberculosis_h37rv {output.vcfmodified} > {output.vcfout}
        '''


rule SnpEff_freeBayes_outVCF:
    input:
        fa=expand("{ref}/GCF_000195955.2_ASM19595v2_genomic.fa", ref=config["reference"]),
        vcf=expand("{outfolder}/freebayes_variant_calling/{sample}_freeBayes.vcf", outfolder=config["output_folder"], sample=config["samples"])
    output:
        vcfmodified=expand("{outfolder}/snpEff_snp_calling/{sample}_freeBayes_snpEff_chrom_modified.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        vcfout=expand("{outfolder}/snpEff_snp_calling/{sample}_freeBayes_snpEff.vcf", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        '''     
        sed 's/NC_000962.3/Chromosome/g' {input.vcf} > {output.vcfmodified}
        java  -Xms7000m -Xmx16000m -XX:ParallelGCThreads=2 -XX:+AggressiveHeap  -jar snpEff/snpEff.jar -noStats -ud 5000 -ss 2 -hgvsOld -hgvs1LetterAa -o vcf -v Mycobacterium_tuberculosis_h37rv {output.vcfmodified} > {output.vcfout}
        '''


rule snpSift_extract_fields_snpEff_pindel:
    input:
        vcfinput=expand("{outfolder}/snpEff_snp_calling/{sample}_pindel_snpEff.vcf", outfolder=config["output_folder"], sample=config["samples"]) 
    output:
        outputfile=expand("{outfolder}/snpSift_extracted_snpEff/{sample}_extracted_pindel_snpEff.txt", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "java -Xmx12g -jar snpEff/SnpSift.jar extractFields {input} POS REF ALT SVTYPE SVLEN ANN[*].GENE ANN[*].EFFECT > {output}"


rule snpSift_annotate_snpEff_freebayes:
    input:
        vcfinput=expand("{outfolder}/snpEff_snp_calling/{sample}_freeBayes_snpEff.vcf", outfolder=config["output_folder"], sample=config["samples"]),
        vcf_DB_custom=expand("{ref}/20230720_BASE_FINALE_PMW-HDv2.vcf", ref=config["reference"])
    output:
        output_annotate_DB_2023=expand("{outfolder}/snpSift_DB_file/{sample}_snpSift_annotate_DB.txt", outfolder=config["output_folder"], sample=config["samples"])
    shell:
        "java -Xmx12g -jar snpEff/SnpSift.jar annotate  {input.vcf_DB_custom} {input.vcfinput} > {output.output_annotate_DB_2023} "


rule join_two_DB:
    input:
        pindel_annot_db=expand("{outfolder}/snpSift_extracted_snpEff/{sample}_extracted_pindel_snpEff.txt", outfolder=config["output_folder"], sample=config["samples"]), #col 6
        bed=expand("{ref}/interval2023_chrom_replaced.bed", ref=config["reference"]) #col 4

    
    output:
        output_join_bed=expand("{outfolder}/join_DB_file/{sample}_join_DB.bed", outfolder=config["output_folder"], sample=config["samples"])

    shell: 
        "java -Xmx12g -jar snpEff/SnpSift.jar join  {input.pindel_annot_db} -cols1 6  {input.bed} -cols2 4 > {output.output_join_bed}"
