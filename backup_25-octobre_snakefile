import pandas as pd
from snakemake.utils import validate
from datetime import date

configfile: "config_test_fabG1.yaml"
today = date.today()
refName="AL123456.3"
datain=config["datas"]
outfolder=config["output_folder"]
ref=config["reference"]

rule all:
    input:
        decompress=expand(datain+"/{sample}_{mate}.fastq", sample=config["samples"], mate=config["pair"]),
        #unzipping=expand("datain/{sample}_{mate}.fastq", sample=config["samples"], mate=config["pair"] ,datain=config["datas"]),
        #outSpolPred_R=expand(outfolder+"/{sample}/spolpred_spoligoTyping/{sample}_R2_spoligoType_R", sample=config["samples"], datain=config["datas"]),
        #outSpolPred_D=expand(outfolder+"/{sample}/spolpred_spoligoTyping/{sample}_R1_spoligoType_D", sample=config["samples"], datain=config["datas"]),
        #outSpolPred_concatenated=expand(outfolder+"/{sample}/spolpred_spoligoTyping/{sample}_spoligoType_DRall",   sample=config["samples"],datain=config["datas"]),
        qc=expand(outfolder+"/{sample}/fastqc_qc/{sample}_{mate}_fastqc.zip", mate=config["pair"], sample=config["samples"]),
        mapping=expand(outfolder+"/{sample}/mapped_reads/{sample}.bam", sample=config["samples"]),
        coverageGenesout=expand(outfolder+"/{sample}/coverage/{sample}_coverageResistGenes",sample=config["samples"]),
        non_coveredGenes_out=expand(outfolder+"/{sample}/coverage/{sample}_coverageResistGenes_selectedNonCovered.txt", sample=config["samples"]),
        snpEffvcfout=expand(outfolder+"/{sample}/snpEff_snp_calling/{sample}_pindel_snpEff.vcf", sample=config["samples"]),
        vcfoutFreeBayes=expand(outfolder+"/{sample}/snpEff_snp_calling/{sample}_freeBayes_snpEff.vcf",  sample=config["samples"]),
        vcfinpu_Chrom_Modified=expand(outfolder+"/{sample}/snpSift_DB_file/{sample}_freeBayes_snpEff_chromModified.vcf",  sample=config["samples"]),
        #output_annotate_DB_2023_bfFiltering_pindel=expand(outfolder+"/{sample}/snpSift_DB_file/{sample}_snpSift_annotate_DB_pindel_beforefiltering.vcf",sample=config["samples"]),
        output_annotate_DB_2023_pindel=expand(outfolder+"/{sample}/snpSift_DB_file/{sample}_snpSift_annotate_DB_pindel.vcf",sample=config["samples"]),
        input_reformat=expand(outfolder+"/{sample}/join_DB_file/{sample}_extracted_pindel_snpEff_join_notreformat.tab",sample=config["samples"]),
        intersect_intervall_pindel=expand(outfolder+"/{sample}/intersect_Intervall_snpEffpindel_annotated/{sample}_intersect_intervallsnpSift_pindel_annotate_DB_2023.vcf",sample=config["samples"]),
        outputfile_snpsift_pindel=expand(outfolder+"/{sample}/snpSift_extracted_snpEff/{sample}_extracted_pindel_snpEff.txt", sample=config["samples"]),
        output_annotate_DB_2023_freebayes=expand(outfolder+"/{sample}/snpSift_DB_file/{sample}_snpSift_annotate_DB.vcf",  sample=config["samples"]),
        pindel_join_bed_selected_cols_sans_header=expand(outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_temps_pindel_join_sans_header.txt", sample=config["samples"]),
        freebayes_join_bed_selected_cols_sans_header=expand(outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_temps_freebayes_join_sans_header.txt", sample=config["samples"]),
        output_join_bed_selected_cols_pindel=expand(outfolder+"/{sample}/join_DB_file/{sample}_join_DB.bed_selected_cols",  sample=config["samples"]),
        BeforeFiltering_annotate_DB_2023=expand(outfolder+"/{sample}/snpSift_DB_file/{sample}_snpSift_annotate_DB_beforeFiltering.vcf",  sample=config["samples"]),
        intersect_intervall_freebayes=expand(outfolder+"/{sample}/intersect_Intervall_snpEffFreeBayes_annotated/{sample}_intersect_intervallsnpSift_freebayes_annotate_DB_2023.vcf",  sample=config["samples"]),
        extractedField_snpEffFreebayes_DB2023=expand(outfolder+"/{sample}/intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_snpEffFreeBayes_geneBed.txt",  sample=config["samples"]),
        output_join_bed_freebayes=expand(outfolder+"/{sample}/join_DB_intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_join_DB.bed",  sample=config["samples"]),
        output_join_bed_selected_cols_sorted_freebayes=expand(outfolder+"/{sample}/join_DB_intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted.txt",  sample=config["samples"]),
        all_pindel_freebayes=expand(outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_concat_pindel_freebayes.txt",  sample=config["samples"]),
        join_bed_selected_cols_sorted_not_rrs_rrl=expand(outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted_not_rrs_rrl.txt",  sample=config["samples"]),
        join_bed_selected_cols_sorted_rrs_rrl=expand(outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted_rrs_rrl.txt",  sample=config["samples"]),
        join_POS_not_rrs_rrl=expand(outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_join_POS_rrs_rrl.txt",  sample=config["samples"]),
        selected_cols_join_POS_rrs_rrl=expand(outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_selected_cols_join_POS_rrs_rrl.txt",  sample=config["samples"]),
        select_line_join_POS_rrs_rrl_sorted=expand(outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_sorted_not_rrs_rrl_pos.txt",  sample=config["samples"]),
        big_table_join_antiBiotics=expand(outfolder+"/{sample}/final_results_assembling_files/{sample}_not_rrs_rrl_join_with_AntiBiotics.txt",  sample=config["samples"]),
        all_gene_join_antiBiotics=expand(outfolder+"/{sample}/final_results_assembling_files/{sample}_not_rrs_rrl_join_with_AntiBiotics.txt",  sample=config["samples"]),
        all_gene_join_antiBiotics_selected_sorted=expand(outfolder+"/{sample}/final_results_assembling_files/{sample}_finale_table_AntiBiotics.txt",  sample=config["samples"]),
        all_concatenated=expand(outfolder+"/{sample}/final_results_assembling_files/{sample}_VcfRrlRrsjoin_two_Vcf_rrl_rrs_spoligotyping_BedSNPSelected_coverageResistGenes_AllConcatenated.txt",  sample=config["samples"]),
        atb=expand(outfolder+"/{sample}/final_results_assembling_files/{sample}ATB.txt",  sample=config["samples"]),
        big_table_join_sorted_antiBiotics=expand(outfolder+"/{sample}/final_results_assembling_files/{sample}_big_table_sorted_AntiBiotics.txt",  sample=config["samples"]),                                                                             
        varscan_snp=expand(outfolder+"/{sample}/variant_calling_varscan/all_varscan.tab", sample=config["samples"]),
        gene_join_lineage=expand(outfolder+"/{sample}/final_results_assembling_files/{sample}_Tb_mutation_lineage.txt",  sample=config["samples"]),
        tbProfilerout_results=expand(outfolder+"/{sample}/tb_profiler_results_files/{sample}_tbprofiler_report.results.pdf", sample=config["samples"]),
        tbProfilerout_results_txt=expand(outfolder+"/{sample}/tb_profiler_results_files/results/{sample}_tbprofiler_report.results.txt", sample=config["samples"]),
        mtbseq_called=expand(outfolder+"/{sample}/mtbseq_results_files/Called/{sample}.gatk_position_variants_cf2_cr2_fr2_ph4_outmode001.tab",sample=config["samples"]),
        mtbseq_called_classificatin=expand(outfolder+"/{sample}/mtbseq_results_files/Classification/Strain_Classification.tab",sample=config["samples"]),
        mtbseq_called_mutations_region=expand(outfolder+"/{sample}/{sample}_called_mutation.tab",sample=config["samples"]),
        mtbseq_called_mutations_report=expand(outfolder+"/{sample}/{sample}_MTBseq_final_report.tab",sample=config["samples"]),
        all_pindel_freebayes_temp=expand(outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_concat_pindel_freebayes_temp.txt", sample=config["samples"]),
        join_table_join_sorted_antiBiotics=expand(outfolder+"/{sample}/{sample}_join_table_dailyPipeline_Tbprofiler.csv",  sample=config["samples"])


rule decom_DSRC_sample:
    input:
         datain+"/{sample}_{mate}.fastq.dsrc"    
    output:
         datain+"/{sample}_{mate}.fastq"   
    threads:4
    shell:
        "dsrc d -t{threads} -s {input} > {output}"


#rule unzip_sample:
#    input:
#        datain+/{sample}_{mate}.fastq.gz"
#    output:
#        datain+/{sample}_{mate}.fastq"
#    shell:
#        '''
#        if [ ! -r {output} ]
#        then
#           gunzip -c {input} > {output} 
#        fi
#        '''


#rule zip_sample:
#    input:
#        datain+/{sample}_{mate}.fastq"
#    output:
#        datain+/{sample}_{mate}.fastq.gz"
#    shell:
#        "gzip -c {input} > {output} " 



rule quality_control_R1:
    input:
        datain+"/{sample}_R1.fastq"
    output:
        outfolder+"/{sample}/fastqc_qc/{sample}_R1_fastqc.zip"
    params:
        outfolder+"/{sample}/fastqc_qc"
    shell:
        "~/tools/FastQC/fastqc -o {params} {input}" 



rule quality_control_R2:
    input:
        datain+"/{sample}_R2.fastq"
    output:
        outfolder+"/{sample}/fastqc_qc/{sample}_R2_fastqc.zip"
    params:
        outfolder+"/{sample}/fastqc_qc"
    shell:
        "~/tools/FastQC/fastqc -o {params} {input}" 






rule bwa_map: # log ne fonctionne pas
    input:
        fa=ref+"/GCF_000195955.2_ASM19595v2_genomic.fa",
        fastq1=datain+"/{sample}_R1.fastq",
        fastq2=datain+"/{sample}_R2.fastq"
    log: 
        log_mapping=outfolder+"/{sample}/mapped_reads/{sample}.log" 
    output:
        mapping=outfolder+"/{sample}/mapped_reads/{sample}.bam"
    shell:
        "bwa mem -t {threads} {input.fa} {input.fastq1} {input.fastq2} -v1  | samtools view -Sb  > {output.mapping}"



rule samtools_sort:
    input:
       outfolder+"/{sample}/mapped_reads/{sample}.bam"   
    output:
        bam=outfolder+"/{sample}/sorted_reads/{sample}.sorted.bam",
        bai=outfolder+"/{sample}/sorted_reads/{sample}.sorted.bam.bai"
    shell:
        '''
        samtools sort -O bam {input} -o {output.bam}
        samtools index {output.bam} {output.bai}
        '''


rule make_pindel_config_file:
    input:
        outfolder+"/{sample}/sorted_reads/{sample}.sorted.bam"
    output:
        outfolder+"/{sample}/pindel_config.txt"
    params:
        "400 {sample}" 
    shell:
        '''
        if [ -f {output} ] 
           then 
              rm {output} 
           fi;
              
        echo "{input} {params}" >> {output}
        '''

rule call_vaiants_pindel: 
    input:
        fa=ref+"/GCF_000195955.2_ASM19595v2_genomic.fa", # -c ALL
        bam=outfolder+"/{sample}/pindel_config.txt",
        bed=ref+"/interval2023_chrom_replaced_pindel.bed"
    output:
        vcfout=outfolder+"/{sample}/pindel_variant_calling/{sample}_all_pindel_output.vcf"    
    log:
        outfolder+"/{sample}/pindel_variant_calling/{sample}_all_pindel_output.log"
    threads: 8
    params:
        outprefix=outfolder+"/{sample}/pindel_variant_calling/{sample}_all_pindel_output", 
    shell:
        '''
        pindel -f {input.fa}  -i {input.bam}  -j {input.bed} -T {threads} -o {params.outprefix} -x6 -e 0.005 -E 0.95 -u 0.05 -M 10  -R true -C true > {log}
        pindel2vcf -P {params.outprefix} -r {input.fa} -R \"NC_000962.3\" --gatk_compatible -d {today} --max_size 100000 -m 1 -v {output.vcfout}
        '''

rule FreeBayes:
    input:
        bam=outfolder+"/{sample}/sorted_reads/{sample}.sorted.bam",
        fa=ref+"/GCF_000195955.2_ASM19595v2_genomic.fa", 
        bed=ref+"/interval2023_chrom_replaced.bed"   
    output:
        vcfout=outfolder+"/{sample}/freebayes_variant_calling/{sample}_freeBayes.vcf", 
    shell:
        "freebayes -f {input.fa} -t {input.bed} -m 30 -q 10  -S 0 -b {input.bam}  > {output}"

rule Coverage:
    input:
        bam=outfolder+"/{sample}/sorted_reads/{sample}.sorted.bam",
        bed=ref+"/interval2023_chrom_replaced.bed",  
        fa=ref+"/AL123456.3.fa.fai" 
    output:
        coverageGenesout=outfolder+"/{sample}/coverage/{sample}_coverageResistGenes" 
    shell:
        "bedtools coverage -split -a {input.bed} -b {input.bam}  > {output}"  #  -g {input.fa}



rule Select_Coverage:
    input:
        coverageGenesinput=outfolder+"/{sample}/coverage/{sample}_coverageResistGenes" 
    output:
        non_coveredGenes_out=outfolder+"/{sample}/coverage/{sample}_coverageResistGenes_selectedNonCovered.txt"
    shell:
        "grep -v '(1.0000000)'  {input.coverageGenesinput} > {output}" 



rule call_variants:
    input:
        fa=ref+"/GCF_000195955.2_ASM19595v2_genomic.fa", 
        bam=outfolder+"/{sample}/sorted_reads/{sample}.sorted.bam"
    output:
        outfolder+"/{sample}/variant_calling/all.vcf"
    shell:
        "bcftools mpileup  -d 8000 -f {input.fa} {input.bam} | bcftools call -mv - > {output}"



rule call_varscan:
    input:
        fa=ref+"/GCF_000195955.2_ASM19595v2_genomic.fa", 
        bam=outfolder+"/{sample}/sorted_reads/{sample}.sorted.bam", 
        bed=ref+"/interval2023_chrom_replaced_pindel.bed"
    output:
        vcf=outfolder+"/{sample}/variant_calling_varscan/all_varscan.vcf",
        tab=outfolder+"/{sample}/variant_calling_varscan/all_varscan.tab"
    shell:
        '''
        samtools mpileup {input.bam} | varscan mpileup2snp --variants --min-coverage 1  --min-avg-qua 10  --output-vcf 1 > {output.vcf}
        samtools mpileup {input.bam} | varscan mpileup2snp --variants --min-coverage 1  --min-avg-qua 10  > {output.tab}
        '''


rule SnpEff_pindel_outVCF:
    input:
        fa=ref+"/GCF_000195955.2_ASM19595v2_genomic.fa", 
       # vcf=outfolder+"/{sample}/pindel_variant_calling/{sample}_all_pindel_output.vcf" 
        vcf= outfolder+"/{sample}/variant_calling/all.vcf"
    output:
        vcfmodified=outfolder+"/{sample}/snpEff_snp_calling/{sample}_pindel_snpEff_chrom_modified_input.vcf", 
        snpEffvcfout=outfolder+"/{sample}/snpEff_snp_calling/{sample}_pindel_snpEff.vcf"
    shell:
        '''
  
      sed 's/NC_000962.3/Chromosome/g' {input.vcf} > {output.vcfmodified}
        java  -Xms7000m -Xmx16000m -XX:ParallelGCThreads=2 -XX:+AggressiveHeap  -jar snpEff/snpEff.jar -noStats -ud 200 -ss 2  -hgvsOld -hgvs1LetterAa -i vcf -o vcf -v Mycobacterium_tuberculosis_h37rv {output.vcfmodified} > {output.snpEffvcfout}
        '''


rule snpSift_annotate_snpEff_pindel:
    input:
        vcfinput=outfolder+"/{sample}/snpEff_snp_calling/{sample}_pindel_snpEff.vcf", 
        vcf_DB_custom=ref+"/20230720_BASE_FINALE_PMW-HDv2.vcf"
    output:
        vcfinput_Chrom_Modified=outfolder+"/{sample}/snpSift_DB_file/{sample}_pindel_snpEff_chromModified.vcf", 
        output_annotate_DB_2023_bfFiltering=outfolder+"/{sample}/snpSift_DB_file/{sample}_snpSift_annotate_DB_pindel.vcf" 
    shell:
        '''
        sed 's/Chromosome/AL123456.3/g' {input.vcfinput} > {output.vcfinput_Chrom_Modified}
        java -Xmx12g -jar snpEff/SnpSift.jar annotate  {input.vcf_DB_custom} {output.vcfinput_Chrom_Modified} > {output.output_annotate_DB_2023_bfFiltering}
        '''





rule intersect_intervall_pindel:
    input:
        annotate_DB_2023=outfolder+"/{sample}/snpSift_DB_file/{sample}_snpSift_annotate_DB_pindel.vcf", 
        bed=ref+"/interval2023_replaced.bed"   
    output:   
        intersect_intervall=outfolder+"/{sample}/intersect_Intervall_snpEffpindel_annotated/{sample}_intersect_intervallsnpSift_pindel_annotate_DB_2023.vcf"
    shell:  
        "bedtools intersect -a {input.annotate_DB_2023} -b {input.bed} -wa -header > {output.intersect_intervall}" 



rule snpSift_extract_fields_snpEff_pindel:
    input:
       intersect_intervall=outfolder+"/{sample}/intersect_Intervall_snpEffpindel_annotated/{sample}_intersect_intervallsnpSift_pindel_annotate_DB_2023.vcf"
    output:
        outputfile=outfolder+"/{sample}/snpSift_extracted_snpEff/{sample}_extracted_pindel_snpEff.txt"
    shell:
        "cat {input} | ./scripts/vcfEffOnePerLine.pl | java -Xmx12g -jar snpEff/SnpSift.jar extractFields - POS REF ALT DP \"ANN[*].GENEID\" \"ANN[*].GENE\" \"ANN[*].HGVS_P\" \"ANN[*].HGVS_C\" QUAL EVENT ABREV \"M_NB_S\" \"M_PROP_S\" \"M_PROP_RES_S\" \"P_INTER\" \"W_INTER\" \"PHENO_NRC\"> {output}"


rule join_two_DB_extract_fields_snpEff_pindel:
    input:
        pindel_annot_db=outfolder+"/{sample}/snpSift_extracted_snpEff/{sample}_extracted_pindel_snpEff.txt",  #col 6
        bed=ref+"/interval2023_with_Header_forJoin.bed" #col 4
    output:
        after_join_notformated=outfolder+"/{sample}/join_DB_file/{sample}_extracted_pindel_snpEff_join_notreformat.tab",
        output_join_bed_selected_cols=outfolder+"/{sample}/join_DB_file/{sample}_join_DB.bed_selected_cols"
    shell: 
        '''
        python scripts/join_bed_vcf.py {input.pindel_annot_db}  {input.bed} {output.after_join_notformated}
        cat {output.after_join_notformated} | sed 1d |awk -F'\t' '{{print $1"\t"$2"\t"$3"\t"$4"\t"0"\t"0"\t"$5"\t"$6"\t"$7"\t"$8"\t"$9"\t"$10"\t"$11"\t"$12"\t"$13"\t"$14"\t"$15"\t"$16"\t"$17}}' | sed '1iPOS"\t"REF"\t"ALT"\t"DP"\t"GEN[*].RO"\t"GEN[*].AO"\t"ANN[*].GENEID"\t"ANN[*].GENE"\t"ANN[*].HGVS_P"\t"ANN[*].HGVS_C"\t"QUAL"\t"EVENT"\t"ABREV"\t"M_NB_S"\t"M_PROP_S"\t"M_PROP_RES_S"\t"P_INTER"\t"W_INTER"\t"PHENO_NRC'| sort -n -k1,1 > {output.output_join_bed_selected_cols}
        '''    


rule SnpEff_freeBayes_outVCF:
    input:
        fa=ref+"/GCF_000195955.2_ASM19595v2_genomic.fa", 
        vcf=outfolder+"/{sample}/freebayes_variant_calling/{sample}_freeBayes.vcf" 
    output:
        vcfmodified=outfolder+"/{sample}/snpEff_snp_calling/{sample}_freeBayes_snpEff_chrom_modified_input.vcf", 
        vcfout=outfolder+"/{sample}/snpEff_snp_calling/{sample}_freeBayes_snpEff.vcf" 
    shell:
        ''' 
        sed 's/NC_000962.3/Chromosome/g' {input.vcf} > {output.vcfmodified}
        java  -Xms7000m -Xmx16000m -XX:ParallelGCThreads=2 -XX:+AggressiveHeap  -jar snpEff/snpEff.jar -noStats -ud 200 -ss 2 -hgvsOld -hgvs1LetterAa -o vcf -v Mycobacterium_tuberculosis_h37rv {output.vcfmodified} > {output.vcfout}
        '''


rule snpSift_annotate_snpEff_freebayes:
    input:
        vcfinput=outfolder+"/{sample}/snpEff_snp_calling/{sample}_freeBayes_snpEff.vcf", 
        vcf_DB_custom=ref+"/20230720_BASE_FINALE_PMW-HDv2.vcf"
    output:
        vcfinput_Chrom_Modified=outfolder+"/{sample}/snpSift_DB_file/{sample}_freeBayes_snpEff_chromModified.vcf", 
        output_annotate_DB_2023_bfFiltering=outfolder+"/{sample}/snpSift_DB_file/{sample}_snpSift_annotate_DB_beforeFiltering.vcf" 
    shell:
        '''
        sed 's/Chromosome/AL123456.3/g' {input.vcfinput} > {output.vcfinput_Chrom_Modified}
        java -Xmx12g -jar snpEff/SnpSift.jar annotate  {input.vcf_DB_custom} {output.vcfinput_Chrom_Modified} > {output.output_annotate_DB_2023_bfFiltering}
        '''





rule snpSift_annotate_snpEff_freebayes_FilteringQuality:
    input:
        annotate_DB_2023=outfolder+"/{sample}/snpSift_DB_file/{sample}_snpSift_annotate_DB_beforeFiltering.vcf" 
    output:
        output_annotate_DB_2023_filtered_qualGT500=outfolder+"/{sample}/snpSift_DB_file/{sample}_snpSift_annotate_DB.vcf" 
    shell:
        "cat  {input.annotate_DB_2023} | java -Xmx12g -jar snpEff/SnpSift.jar filter \"( QUAL > 0 )\" > {output.output_annotate_DB_2023_filtered_qualGT500}"





rule bedtools_intersect_interval_freebayes: 
    input:
        filtered_annotate_DB_2023=outfolder+"/{sample}/snpSift_DB_file/{sample}_snpSift_annotate_DB.vcf", 
        bed=ref+"/interval2023_replaced.bed"
    output:   
        intersect_intervall=outfolder+"/{sample}/intersect_Intervall_snpEffFreeBayes_annotated/{sample}_intersect_intervallsnpSift_freebayes_annotate_DB_2023.vcf"
    shell:  
        "bedtools intersect -a {input.filtered_annotate_DB_2023} -b {input.bed} -wa -header > {output.intersect_intervall}" 




rule snpSift_extract_fields_intersect_interval_SnpEff_freebayes:
    input:
       input_intersect_interval=outfolder+"/{sample}/intersect_Intervall_snpEffFreeBayes_annotated/{sample}_intersect_intervallsnpSift_freebayes_annotate_DB_2023.vcf" 
    output:
        extractedField_snpEffFreebayes_DB2023=outfolder+"/{sample}/intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_snpEffFreeBayes_geneBed.txt" 
    shell:
        "cat {input.input_intersect_interval} | ./scripts/vcfEffOnePerLine.pl | java -Xmx12g -jar snpEff/SnpSift.jar extractFields - POS REF ALT GEN[*].DP GEN[*].RO GEN[*].AO \"ANN[*].GENEID\" \"ANN[*].GENE\" \"ANN[*].HGVS_P\" \"ANN[*].HGVS_C\" QUAL EVENT ABREV \"M_NB_S\" \"M_PROP_S\" \"M_PROP_RES_S\" \"P_INTER\" \"W_INTER\" \"PHENO_NRC\" > {output.extractedField_snpEffFreebayes_DB2023}"



rule join_two_DB_extractedField_IntersectIntervall_BedVcf:
    input:
        extractedField_snpEffFreebayes_DB2023=outfolder+"/{sample}/intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_snpEffFreeBayes_geneBed.txt",  
        bed=ref+"/interval2023_with_Header_forJoin.bed" #col 4sample=config["samples"]),
    output:
        output_join_bed=outfolder+"/{sample}/join_DB_intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_join_DB.bed", 
        output_join_bed_selected_cols_sorted=outfolder+"/{sample}/join_DB_intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted.txt" 
    shell: 
        ''' python scripts/join_bed_vcf.py {input.extractedField_snpEffFreebayes_DB2023} {input.bed} {output.output_join_bed}
            cut -f1-19 {output.output_join_bed} | sort -n -k1,1 > {output.output_join_bed_selected_cols_sorted}
        '''



rule select_join_two_Vcf_rrl_rrs:
    input:
        freebayes_join_bed_selected_cols_sorted=outfolder+"/{sample}/join_DB_intersect_Intervall_snpEffFreeBayes_DB2023/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted.txt", 
        pindel_join_bed_selected_cols=outfolder+"/{sample}/join_DB_file/{sample}_join_DB.bed_selected_cols"
    output:
        pindel_join_bed_selected_cols_sans_header=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_temps_pindel_join_sans_header.txt",
        freebayes_temp_join_bed_selected_cols_sans_header=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_temps_freebayes_join_sans_header.txt",
        all_pindel_freebayes_temp=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_concat_pindel_freebayes_temp.txt",
        all_pindel_freebayes=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_concat_pindel_freebayes.txt",
        output_join_bed_selected_cols_sorted_rrs_rrl=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted_rrs_rrl.txt", 
        output_join_bed_selected_cols_sorted_not_rrs_rrl=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted_not_rrs_rrl.txt"
    shell: 
        '''
        cat {input.pindel_join_bed_selected_cols} | sed 1d  | sed 's/^/Var /' > {output.pindel_join_bed_selected_cols_sans_header}
        cat {input.freebayes_join_bed_selected_cols_sorted} | sed 1d | sed 's/^/Freb /' | sed '1iPOS"\t"REF"\t"ALT"\t"DP"\t"GEN[*].RO"\t"GEN[*].AO"\t"ANN[*].GENEID"\t"ANN[*].GENE"\t"ANN[*].HGVS_P"\t"ANN[*].HGVS_C"\t"QUAL"\t"EVENT"\t"ABREV"\t"M_NB_S"\t"M_PROP_S"\t"M_PROP_RES_S"\t"P_INTER"\t"W_INTER"\t"PHENO_NRC' > {output.freebayes_temp_join_bed_selected_cols_sans_header}
        cat  {output.freebayes_temp_join_bed_selected_cols_sans_header} {output.pindel_join_bed_selected_cols_sans_header} >> {output.all_pindel_freebayes_temp}

        python scripts/remove_redundancy.py {output.all_pindel_freebayes_temp} {output.all_pindel_freebayes}
        grep "rrs\|rrl\|POS" {output.all_pindel_freebayes} > {output.output_join_bed_selected_cols_sorted_rrs_rrl}
        grep -v "rrs\|rrl" {output.all_pindel_freebayes} > {output.output_join_bed_selected_cols_sorted_not_rrs_rrl}
        '''


rule join_rrs_rrl_pos:
    input:
        input_join_bed_selected_cols_sorted_rrs_rrl=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted_rrs_rrl.txt", 
        rrl_rrs_data=ref+"/rrs-rrl_position.txt"#col 1 
    output:
        join_POS_rrs_rrl=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_join_POS_rrs_rrl.txt"
    shell: 
        "python scripts/join_bed_vcf.py {input.input_join_bed_selected_cols_sorted_rrs_rrl} {input.rrl_rrs_data} {output.join_POS_rrs_rrl}"
           

rule choose_cols_join_rrs_rrl_pos:
    input:
        join_POS_rrs_rrl=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_join_POS_rrs_rrl.txt"
    output:
        selected_cols_join_POS_rrs_rrl=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_selected_cols_join_POS_rrs_rrl.txt"
    shell:
        """cat {input.join_POS_rrs_rrl} |  awk -F'\t' '{{print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"$8"\t"$21"\t"$10"\t"$11"\t"$12"\t"$13"\t"$14"\t"$15"\t"$16"\t"$17"\t"$18"\t"$19}}' | sed 1d > {output.selected_cols_join_POS_rrs_rrl}"""



rule call_spolpred_D:
    input:
       datain+"/{sample}_R1.fastq"
    output:
      outfolder+"/{sample}/spolpred_spoligoTyping/{sample}_R1_spoligoType_D"
    shell:
        "./spolpred/SpolPred {input} -l 50 -b d -o {output} -s on -a 50 -m 2"


rule call_spolpred_R:
    input:
        datain+"/{sample}_R2.fastq"
    output:
       outfolder+"/{sample}/spolpred_spoligoTyping/{sample}_R2_spoligoType_R"
    shell:
        "./spolpred/SpolPred {input} -l 50 -b r -o {output} -s on -a 50 -m 2"



rule concatenate_spoligoType_D_R:
    input:
        outSpolPred_D=outfolder+"/{sample}/spolpred_spoligoTyping/{sample}_R1_spoligoType_D",
        outSpolPred_R=outfolder+"/{sample}/spolpred_spoligoTyping/{sample}_R2_spoligoType_R"
    output:
        outfolder+"/{sample}/spolpred_spoligoTyping/{sample}_spoligoType_DRall"
    shell:
        "cat {input.outSpolPred_D} {input.outSpolPred_R} > {output}"


rule cocatenate_and_select_data_set:
    input:
        output_join_bed_selected_cols_sorted_not_rrs_rrl=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_extractedField_IntersectIntervall_join_DB_selected_cols_sorted_not_rrs_rrl.txt", 
        selected_cols_join_POS_rrs_rrl=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_selected_cols_join_POS_rrs_rrl.txt"
        
    output:
        cocatenate_not_rrs_rrl_selected_cols_join_POS_rrs_rrl=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_concatenate_not_rrs_rrl_pos.txt",
        select_line_join_POS_rrs_rrl_sorted=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_sorted_not_rrs_rrl_pos.txt", 
        select_line_join_POS_rrs_rrl_sorted_select_cols=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_all_genes_pos_sorted_select_columns.txt"

    shell:
        '''
        cat {input.output_join_bed_selected_cols_sorted_not_rrs_rrl} {input.selected_cols_join_POS_rrs_rrl}  > {output.cocatenate_not_rrs_rrl_selected_cols_join_POS_rrs_rrl}
        grep -v -P '[-|\*]\d{{3,5}}' {output.cocatenate_not_rrs_rrl_selected_cols_join_POS_rrs_rrl} | sort -n -k1,1 > {output.select_line_join_POS_rrs_rrl_sorted}
        #cat  {output.cocatenate_not_rrs_rrl_selected_cols_join_POS_rrs_rrl} | sort -n -k1,1  > {output.select_line_join_POS_rrs_rrl_sorted}
        cat {output.select_line_join_POS_rrs_rrl_sorted} | cut -f 1-6,8-11 > {output.select_line_join_POS_rrs_rrl_sorted_select_cols}
        '''

rule concatenate_datasets: 
    input:
        select_line_join_POS_rrs_rrl_sorted=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_sorted_not_rrs_rrl_pos.txt", 
        outSpolPred_concatenated=outfolder+"/{sample}/spolpred_spoligoTyping/{sample}_spoligoType_DRall",
        non_coveredGenes_out=outfolder+"/{sample}/coverage/{sample}_coverageResistGenes_selectedNonCovered.txt"
    output:
        out_all_concatenated=outfolder+"/{sample}/final_results_assmembling_files/{sample}_VcfRrlRrsjoin_two_Vcf_rrl_rrs_spoligotyping_BedSNPSelected_coverageResistGenes_AllConcatenated.txt"
    shell:
        "cat {input.select_line_join_POS_rrs_rrl_sorted} {input.outSpolPred_concatenated} {input.non_coveredGenes_out} > {output.out_all_concatenated}"



rule join_two_datasets:
    input:
        select_line_join_POS_rrs_rrl_sorted_select_cols=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_all_genes_pos_sorted_select_columns.txt",  
        all_cols_join_POS_rrs_rrl_sorted=outfolder+"/{sample}/join_two_Vcf_rrl_rrs/{sample}_sorted_not_rrs_rrl_pos.txt", 
        antibiotics_data=ref+"/ATB-Genes.txt"
    output:
        all_gene_join_antiBiotics=outfolder+"/{sample}/final_results_assembling_files/{sample}_not_rrs_rrl_join_with_AntiBiotics.txt", 
        big_table_join_antiBiotics=outfolder+"/{sample}/final_results_assembling_files/{sample}_big_table_not_rrs_rrl_join_with_AntiBiotics.txt",
        
    shell:
        '''
        python scripts/join_bed_keeping_All_linesVCF.py {input.select_line_join_POS_rrs_rrl_sorted_select_cols} {input.antibiotics_data} {output.all_gene_join_antiBiotics}
        python scripts/join_bed_keeping_All_linesVCF.py {input.all_cols_join_POS_rrs_rrl_sorted} {input.antibiotics_data} {output.big_table_join_antiBiotics}
        '''

    
rule last_formating:
    input:
        all_gene_join_antiBiotics=outfolder+"/{sample}/final_results_assembling_files/{sample}_not_rrs_rrl_join_with_AntiBiotics.txt", 
        big_table_join_antiBiotics=outfolder+"/{sample}/final_results_assembling_files/{sample}_big_table_not_rrs_rrl_join_with_AntiBiotics.txt"
    output:
        all_gene_join_antiBiotics_selected_sorted=outfolder+"/{sample}/final_results_assembling_files/{sample}_finale_table_AntiBiotics.txt", 
        atb=outfolder+"/{sample}/final_results_assembling_files/{sample}ATB.txt", 
        big_table_join_sorted_antiBiotics=outfolder+"/{sample}/final_results_assembling_files/{sample}_big_table_sorted_AntiBiotics.txt"

    shell:
        '''
        cat {input.big_table_join_antiBiotics}|awk -F'\t' '{{print $20"\t"$1"\t"$2"\t"$3"\t"$4"\t"$6"\t"$6*100/$4"\t"$8"\t"$9"\t"$10"\t"$11"\t"$14"\t"$15"\t"$16"\t"$17"\t"$18"\t"$19}}' | sed 1d | sort  -k1,1 |sed '1iAntibio\tPOS\tREF\tALT\tGEN[*].DP\tGEN[*].AO\t%mutated\tANN[*].GENE\tANN[*].HGVS_P\tANN[*].HGVS_C\tQUAL\tM_NB_S\tM_PROP_S\tM_PROP_RES_S\tP_INTER\tW_INTER\tPHENO_NRC'>{output.big_table_join_sorted_antiBiotics}
        cat {input.all_gene_join_antiBiotics} |awk -F'\t' '{{print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"$11}}'| sed 1d | sort -n -k1,1 | sed '1iPOS\tREF\tALT\tGEN[*].DP\tGEN[*].RO\tGEN[*].AO\tANN[*].GENE\tAntibio'> {output.all_gene_join_antiBiotics_selected_sorted}
        cat {input.all_gene_join_antiBiotics} |awk -F'\t' '{{print $11"\t"$1"\t"$4"\t"$6"\t"$7"\t"$8"\t"$9}}' | sed 1d | sort -k1,1 | sed '1iAntibio\tPOS\tGEN[*].DP\tGEN[*].AO\tANN[*].GENE\tANN[*].HGVS_P\tANN[*].HGVS_C' > {output.atb}
        '''    


### Lineage using TBgene SNP barcoding
rule join_two_lineage_MTBC_bc_SNPs:
    input:
        lineage_bc_snps=ref+"/snp_barcode_trie.tsv", 
        varscan_variant=outfolder+"/{sample}/variant_calling_varscan/all_varscan.tab"                                                                           
    output: 
        varscan_out_renamed=outfolder+"/{sample}/variant_calling_varscan/all_varscan_Position.tab", 
        gene_join_lineage=outfolder+"/{sample}/final_results_assembling_files/{sample}_Tb_mutation_lineage.txt"
    shell:
        '''
        cat {input.varscan_variant} | sed 's/POS/Position/' | sed 's/REF/reference/g' > {output.varscan_out_renamed}
        python scripts/join_bed_keeping_All_linesVCF.py {output.varscan_out_renamed}  {input.lineage_bc_snps} {output.gene_join_lineage}
        '''

rule TB_profiler:
    input:
        r1=datain+"/{sample}_R1.fastq",
        r2=datain+"/{sample}_R2.fastq"
    output:
        tbProfilerout=directory(outfolder+"/{sample}/tb_profiler_results_files"),
        tbProfilerout_results=outfolder+"/{sample}/tb_profiler_results_files/{sample}_tbprofiler_report.results.pdf",
        tbProfilerout_results_txt=outfolder+"/{sample}/tb_profiler_results_files/results/{sample}_tbprofiler_report.results.txt"
    params:
        res="{sample}_tbprofiler_report"
    threads:4
    shell:
        '''
        cd  {output.tbProfilerout}
        tb-profiler profile -t{threads} -1 {input.r1} -2 {input.r2} -p {params.res} --min_depth 2 --af 2  --txt --csv --pdf 
        '''


rule running_MTbseq:
    input:
        bed=ref+"/interval2023_for_MTBseq.bed",
        r1=datain+"/{sample}_R1.fastq",
        r2=datain+"/{sample}_R2.fastq"
    output:
        mtbseq_dir=directory(outfolder+"/{sample}/mtbseq_results_files"),
        samp_r1_gz=outfolder+"/{sample}/mtbseq_results_files/{sample}_R1.fastq.gz",
        samp_r2_gz=outfolder+"/{sample}/mtbseq_results_files/{sample}_R2.fastq.gz",
        mtbseq_called=outfolder+"/{sample}/mtbseq_results_files/Called/{sample}.gatk_position_variants_cf2_cr2_fr2_ph4_outmode001.tab",
        mtbseq_called_classificatin=outfolder+"/{sample}/mtbseq_results_files/Classification/Strain_Classification.tab"
    threads:10
    conda : "mtbseq-env.yaml"
    shell:
        '''
        gzip -c {input.r1} > {output.samp_r1_gz}
        gzip -c {input.r2}  > {output.samp_r2_gz}
        cd {output.mtbseq_dir}
        MTBseq --step TBfull --threads {threads} --lowfreq_vars 1 --minfreq 2 --mincovf 2 --mincovr 2 --minbqual13
        conda deactivate 
        '''

rule join_res_MTbseq:
    input:
        bed=ref+"/interval2023_for_MTBseq.bed",
        mtbseq_called=outfolder+"/{sample}/mtbseq_results_files/Called/{sample}.gatk_position_variants_cf2_cr2_fr2_ph4_outmode001.tab",
        mtbseq_called_classificatin=outfolder+"/{sample}/mtbseq_results_files/Classification/Strain_Classification.tab"
    output:
        mtbseq_called_mutations_region=outfolder+"/{sample}/{sample}_called_mutation.tab",
        mtbseq_called_mutations_report=outfolder+"/{sample}/{sample}_MTBseq_final_report.tab"
    shell:
        '''
        python scripts/join_bed_vcf.py {input.mtbseq_called} {input.bed} {output.mtbseq_called_mutations_region}
        cat {output.mtbseq_called_mutations_region} | awk -F'\t' '{{$1"\t"$3"\t"$5"\t"$10"\t"$9"\t"$11"\t"$12"\t"$13"\t"$14"\t"$15"\t"$16"\t"$17}}' >> {output.mtbseq_called_mutations_report}
        cat {input.mtbseq_called_classificatin} >> {output.mtbseq_called_mutations_report}
        '''





rule result_firstePipeline_tbprofiler:
    input:
        tbProfilerout_results=outfolder+"/{sample}/tb_profiler_results_files/results/{sample}_tbprofiler_report.results.txt", 
        big_table_join_sorted_antiBiotics=outfolder+"/{sample}/final_results_assembling_files/{sample}_big_table_sorted_AntiBiotics.txt"
    output:
        join_tbprof_sorted_antiBiotics=outfolder+"/{sample}/{sample}_join_table_dailyPipeline_Tbprofiler.csv"
    shell:
        '''
        echo "Pipeline_Report:" >> {output.join_tbprof_sorted_antiBiotics}
        cat {input.big_table_join_sorted_antiBiotics} | tr ',' '.' |tr '\t' ','>> {output.join_tbprof_sorted_antiBiotics}
        cat {input.tbProfilerout_results} | sed '/Coverage/Q'| tr ',' '.'  |tr '\t' ','>> {output.join_tbprof_sorted_antiBiotics}
        '''
